var express = require("express"),    app = express(),    bodyParser = require("body-parser"),    mongoose = require("mongoose"),    passport = require("passport"),    LocalStrategy = require("passport-local"),    Campground = require("./models/campground"),    seedDB = require("./seeds"),    flash = require("connect-flash"),    methodOverride = require("method-override"),    User   = require("./models/user"),    Comment = require("./models/comment");var commentRoutes = require("./routes/comments"),    campgroundRoutes = require("./routes/campgrounds"),    indexRoutes  = require("./routes/index");var CONNECTION_URI = process.env.MONGODB_URI || "mongodb://localhost/yelp_camp";mongoose.connect(CONNECTION_URI);app.use(bodyParser.urlencoded({extended: true}));app.set("view engine", "ejs");app.use(express.static("public"));app.use(methodOverride("_method"));app.use(flash());// seedDB(); //seed the database// PASSPORT CONFIGURATIONapp.use(require("express-session")({    secret: "I am very busy!",    resave: false,    saveUninitialized: false}));app.use(passport.initialize());app.use(passport.session());passport.use(new LocalStrategy(User.authenticate()));passport.serializeUser(User.serializeUser());passport.deserializeUser(User.deserializeUser());app.use(function(req, res, next){    res.locals.currentUser = req.user;    res.locals.error = req.flash("error");    res.locals.success = req.flash("success");    next();});/*// INDEX - show all campgroundsapp.get("/campgrounds", function(req, res){    //Get all campgrounds from DB    Campground.find({}, function(err, allcampgrounds){        if(err){            console.log(err);        } else {            res.render("campgrounds/index", {campgrounds: allcampgrounds});        }    });});app.post("/campgrounds",  function(req, res){   //get data from form and add to campgrounds array   var name = req.body.name;   var image = req.body.image;   var desc = req.body.description;   var newCampground = {name: name, image: image, description: desc};   // Create a new campground and save to DB   Campground.create(newCampground, function(err, newlyCreated){       if(err){           console.log(err);       } else {           //redirect back to campground           res.redirect("/campgrounds");       }   });   //campgrounds.push(newCampground);});//NEW - show form to create new campgroundapp.get("/campgrounds/new", function(req, res){   res.render("campgrounds/new");});// SHOW - shows the template with that campgroundapp.get("/campgrounds/:id", function(req, res){    //find the campground with provided ID    Campground.findById(req.params.id).populate("comments").exec(function(err, foundCampground){        if(err){            console.log(err);        } else {            //render show template with that campground            res.render("campgrounds/show", {campground: foundCampground});        }    });});// ===========================//  COMMENTS ROUTES// ===========================app.get("/campgrounds/:id/comments/new", isLoggedIn, function(req,res){    // find campground by id    Campground.findById(req.params.id, function(err, campground){        if(err){            console.log(err);        } else {            res.render("comments/new", {campground: campground});        }    });});app.post("/campgrounds/:id/comments", function(req, res){    //lookup campground using ID    Campground.findById(req.params.id, function(err, campground){        if(err) {            console.log(err);        } else {            Comment.create(req.body.comment, function(err, comment){                if(err){                    console.log(err);                } else {                    campground.comments.push(comment);                    campground.save();                    res.redirect("/campgrounds/" + campground._id);                }            })        }    });});app.get("/", function(req, res){    res.render("landing");});//===================// AUTH ROUTES//===================//show register formapp.get("/register", function(req, res){    res.render("register");});// handle sign up logicapp.post("/register", function(req, res){    var newUser = new User({username: req.body.username});    User.register(newUser, req.body.password, function(err, user){        if(err){            console.log(err);            return res.render("register");        }        passport.authenticate("local")(req, res, function(){            res.redirect("/campgrounds");        });    });});// show login formapp.get("/login", function(req, res){    res.render("login");});//handling login logicapp.post("/login", passport.authenticate("local",    {        successRedirect: "/campgrounds",        failureRedirect: "/login"    }), function(req, res){});// logout routeapp.get("/logout", function(req, res){    req.logout();    res.redirect("/campgrounds");});function isLoggedIn(req, res, next){    if(req.isAuthenticated()){        return next();    }    res.redirect("/login");}*/app.use(indexRoutes);app.use(campgroundRoutes);app.use(commentRoutes);app.listen((process.env.PORT || 3000),function(){    console.log(`Sever has started on port`);});